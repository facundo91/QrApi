### YamlMime:ManagedReference
items:
- uid: qrAPI.DAL.Daos.Interfaces.IPetRepository
  commentId: T:qrAPI.DAL.Daos.Interfaces.IPetRepository
  id: IPetRepository
  parent: qrAPI.DAL.Daos.Interfaces
  children:
  - qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync(System.String)
  - qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync(System.Guid)
  langs:
  - csharp
  - vb
  name: IPetRepository
  nameWithType: IPetRepository
  fullName: qrAPI.DAL.Daos.Interfaces.IPetRepository
  type: Interface
  source:
    remote:
      path: src/qrAPI.DAL/Daos/Interfaces/IPetRepository.cs
      branch: master
      repo: https://github.com/facundo91/QrApi.git
    id: IPetRepository
    path: ../src/qrAPI.DAL/Daos/Interfaces/IPetRepository.cs
    startLine: 7
  assemblies:
  - qrAPI.DAL
  namespace: qrAPI.DAL.Daos.Interfaces
  syntax:
    content: 'public interface IPetRepository : IRepository<PetDto>'
    content.vb: >-
      Public Interface IPetRepository

          Inherits IRepository(Of PetDto)
  inheritedMembers:
  - qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.GetAllAsync
  - qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.GetAsync(System.Object)
  - qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.InsertAsync(qrAPI.DAL.Dtos.PetDto)
  - qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.UpdateAsync(qrAPI.DAL.Dtos.PetDto)
  - qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.DeleteAsync(System.Object)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync(System.String)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync(System.String)
  id: GetAllByNameAsync(System.String)
  parent: qrAPI.DAL.Daos.Interfaces.IPetRepository
  langs:
  - csharp
  - vb
  name: GetAllByNameAsync(String)
  nameWithType: IPetRepository.GetAllByNameAsync(String)
  fullName: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync(System.String)
  type: Method
  source:
    remote:
      path: src/qrAPI.DAL/Daos/Interfaces/IPetRepository.cs
      branch: master
      repo: https://github.com/facundo91/QrApi.git
    id: GetAllByNameAsync
    path: ../src/qrAPI.DAL/Daos/Interfaces/IPetRepository.cs
    startLine: 9
  assemblies:
  - qrAPI.DAL
  namespace: qrAPI.DAL.Daos.Interfaces
  syntax:
    content: Task<IEnumerable<PetDto>> GetAllByNameAsync(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{qrAPI.DAL.Dtos.PetDto}}
    content.vb: Function GetAllByNameAsync(name As String) As Task(Of IEnumerable(Of PetDto))
  overload: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync*
- uid: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync(System.Guid)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync(System.Guid)
  id: GetAllByUserIdAsync(System.Guid)
  parent: qrAPI.DAL.Daos.Interfaces.IPetRepository
  langs:
  - csharp
  - vb
  name: GetAllByUserIdAsync(Guid)
  nameWithType: IPetRepository.GetAllByUserIdAsync(Guid)
  fullName: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/qrAPI.DAL/Daos/Interfaces/IPetRepository.cs
      branch: master
      repo: https://github.com/facundo91/QrApi.git
    id: GetAllByUserIdAsync
    path: ../src/qrAPI.DAL/Daos/Interfaces/IPetRepository.cs
    startLine: 10
  assemblies:
  - qrAPI.DAL
  namespace: qrAPI.DAL.Daos.Interfaces
  syntax:
    content: Task<IEnumerable<PetDto>> GetAllByUserIdAsync(Guid userId)
    parameters:
    - id: userId
      type: System.Guid
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{qrAPI.DAL.Dtos.PetDto}}
    content.vb: Function GetAllByUserIdAsync(userId As Guid) As Task(Of IEnumerable(Of PetDto))
  overload: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync*
references:
- uid: qrAPI.DAL.Daos.Interfaces
  commentId: N:qrAPI.DAL.Daos.Interfaces
  name: qrAPI.DAL.Daos.Interfaces
  nameWithType: qrAPI.DAL.Daos.Interfaces
  fullName: qrAPI.DAL.Daos.Interfaces
- uid: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.GetAllAsync
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.GetAllAsync
  parent: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}
  definition: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IRepository<PetDto>.GetAllAsync()
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.GetAllAsync()
  nameWithType.vb: IRepository(Of PetDto).GetAllAsync()
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).GetAllAsync()
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IRepository<PetDto>.GetAllAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IRepository(Of PetDto).GetAllAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.GetAsync(System.Object)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.GetAsync(System.Object)
  parent: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}
  definition: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAsync(System.Object)
  name: GetAsync(Object)
  nameWithType: IRepository<PetDto>.GetAsync(Object)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.GetAsync(System.Object)
  nameWithType.vb: IRepository(Of PetDto).GetAsync(Object)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).GetAsync(System.Object)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAsync(System.Object)
    name: GetAsync
    nameWithType: IRepository<PetDto>.GetAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAsync(System.Object)
    name: GetAsync
    nameWithType: IRepository(Of PetDto).GetAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.InsertAsync(qrAPI.DAL.Dtos.PetDto)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.InsertAsync(qrAPI.DAL.Dtos.PetDto)
  parent: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}
  definition: qrAPI.DAL.Daos.Interfaces.IRepository`1.InsertAsync(`0)
  name: InsertAsync(PetDto)
  nameWithType: IRepository<PetDto>.InsertAsync(PetDto)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.InsertAsync(qrAPI.DAL.Dtos.PetDto)
  nameWithType.vb: IRepository(Of PetDto).InsertAsync(PetDto)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).InsertAsync(qrAPI.DAL.Dtos.PetDto)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IRepository<PetDto>.InsertAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IRepository(Of PetDto).InsertAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.UpdateAsync(qrAPI.DAL.Dtos.PetDto)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.UpdateAsync(qrAPI.DAL.Dtos.PetDto)
  parent: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}
  definition: qrAPI.DAL.Daos.Interfaces.IRepository`1.UpdateAsync(`0)
  name: UpdateAsync(PetDto)
  nameWithType: IRepository<PetDto>.UpdateAsync(PetDto)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.UpdateAsync(qrAPI.DAL.Dtos.PetDto)
  nameWithType.vb: IRepository(Of PetDto).UpdateAsync(PetDto)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).UpdateAsync(qrAPI.DAL.Dtos.PetDto)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IRepository<PetDto>.UpdateAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IRepository(Of PetDto).UpdateAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.DeleteAsync(System.Object)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}.DeleteAsync(System.Object)
  parent: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}
  definition: qrAPI.DAL.Daos.Interfaces.IRepository`1.DeleteAsync(System.Object)
  name: DeleteAsync(Object)
  nameWithType: IRepository<PetDto>.DeleteAsync(Object)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.DeleteAsync(System.Object)
  nameWithType.vb: IRepository(Of PetDto).DeleteAsync(Object)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).DeleteAsync(System.Object)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.DeleteAsync(System.Object)
    name: DeleteAsync
    nameWithType: IRepository<PetDto>.DeleteAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.DeleteAsync(System.Object)
    name: DeleteAsync
    nameWithType: IRepository(Of PetDto).DeleteAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAllAsync
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAllAsync
  name: GetAllAsync()
  nameWithType: IRepository<TDto>.GetAllAsync()
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.GetAllAsync()
  nameWithType.vb: IRepository(Of TDto).GetAllAsync()
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).GetAllAsync()
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IRepository<TDto>.GetAllAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAllAsync
    name: GetAllAsync
    nameWithType: IRepository(Of TDto).GetAllAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}
  commentId: T:qrAPI.DAL.Daos.Interfaces.IRepository{qrAPI.DAL.Dtos.PetDto}
  parent: qrAPI.DAL.Daos.Interfaces
  definition: qrAPI.DAL.Daos.Interfaces.IRepository`1
  name: IRepository<PetDto>
  nameWithType: IRepository<PetDto>
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<qrAPI.DAL.Dtos.PetDto>
  nameWithType.vb: IRepository(Of PetDto)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of qrAPI.DAL.Dtos.PetDto)
  name.vb: IRepository(Of PetDto)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAsync(System.Object)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAsync(System.Object)
  isExternal: true
  name: GetAsync(Object)
  nameWithType: IRepository<TDto>.GetAsync(Object)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.GetAsync(System.Object)
  nameWithType.vb: IRepository(Of TDto).GetAsync(Object)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).GetAsync(System.Object)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAsync(System.Object)
    name: GetAsync
    nameWithType: IRepository<TDto>.GetAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.GetAsync(System.Object)
    name: GetAsync
    nameWithType: IRepository(Of TDto).GetAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.InsertAsync(`0)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository`1.InsertAsync(`0)
  name: InsertAsync(TDto)
  nameWithType: IRepository<TDto>.InsertAsync(TDto)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.InsertAsync(TDto)
  nameWithType.vb: IRepository(Of TDto).InsertAsync(TDto)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).InsertAsync(TDto)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IRepository<TDto>.InsertAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.InsertAsync(`0)
    name: InsertAsync
    nameWithType: IRepository(Of TDto).InsertAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.UpdateAsync(`0)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository`1.UpdateAsync(`0)
  name: UpdateAsync(TDto)
  nameWithType: IRepository<TDto>.UpdateAsync(TDto)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.UpdateAsync(TDto)
  nameWithType.vb: IRepository(Of TDto).UpdateAsync(TDto)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).UpdateAsync(TDto)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IRepository<TDto>.UpdateAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: IRepository(Of TDto).UpdateAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.DeleteAsync(System.Object)
  commentId: M:qrAPI.DAL.Daos.Interfaces.IRepository`1.DeleteAsync(System.Object)
  isExternal: true
  name: DeleteAsync(Object)
  nameWithType: IRepository<TDto>.DeleteAsync(Object)
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.DeleteAsync(System.Object)
  nameWithType.vb: IRepository(Of TDto).DeleteAsync(Object)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).DeleteAsync(System.Object)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.DeleteAsync(System.Object)
    name: DeleteAsync
    nameWithType: IRepository<TDto>.DeleteAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1.DeleteAsync(System.Object)
    name: DeleteAsync
    nameWithType: IRepository(Of TDto).DeleteAsync
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IRepository`1
  commentId: T:qrAPI.DAL.Daos.Interfaces.IRepository`1
  name: IRepository<TDto>
  nameWithType: IRepository<TDto>
  fullName: qrAPI.DAL.Daos.Interfaces.IRepository<TDto>
  nameWithType.vb: IRepository(Of TDto)
  fullName.vb: qrAPI.DAL.Daos.Interfaces.IRepository(Of TDto)
  name.vb: IRepository(Of TDto)
  spec.csharp:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: qrAPI.DAL.Daos.Interfaces.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: qrAPI.DAL.Daos.Interfaces.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDto
    nameWithType: TDto
    fullName: TDto
  - name: )
    nameWithType: )
    fullName: )
- uid: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync*
  commentId: Overload:qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync
  name: GetAllByNameAsync
  nameWithType: IPetRepository.GetAllByNameAsync
  fullName: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByNameAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{qrAPI.DAL.Dtos.PetDto}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{qrAPI.DAL.Dtos.PetDto}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<PetDto>>
  nameWithType: Task<IEnumerable<PetDto>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<qrAPI.DAL.Dtos.PetDto>>
  nameWithType.vb: Task(Of IEnumerable(Of PetDto))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of qrAPI.DAL.Dtos.PetDto))
  name.vb: Task(Of IEnumerable(Of PetDto))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: qrAPI.DAL.Dtos.PetDto
    name: PetDto
    nameWithType: PetDto
    fullName: qrAPI.DAL.Dtos.PetDto
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync*
  commentId: Overload:qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync
  name: GetAllByUserIdAsync
  nameWithType: IPetRepository.GetAllByUserIdAsync
  fullName: qrAPI.DAL.Daos.Interfaces.IPetRepository.GetAllByUserIdAsync
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
